{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","defaults","baseURL","App","state","res","number","finalnumber","fetch","then","response","json","setState","numret","this","className","type","onChange","event","target","value","onClick","id","i","push","length","word","frequency","wordlis","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kTAKAA,EAAMC,SAASC,QAAQ,wB,IA0ERC,E,4MAxEbC,MAAM,CACFC,IAAI,GACJC,OAAO,EACPC,YAAY,G,uLAKfC,MAAM,8BACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAJ,GACJ,EAAKO,SAAS,CAAEP,IAAIA,O,gIAUlB,IAAD,OASHQ,EAAS,GAaGC,KAAKV,MAAbC,IACR,OACE,yBAAKU,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,QAAO,wCACxB,+EACA,4FACA,2BAAOC,KAAK,SAAUC,SA5BR,SAACC,GAEjB,EAAKN,SAAS,CAACN,OAAOY,EAAMC,OAAOC,WA0Be,6BAElD,kCAAO,4BAAQC,QA1BM,SAACH,GAEtB,EAAKN,SAAS,CAACL,YAAY,EAAKH,MAAME,WAwB/B,WANL,IAMiE,6BACrE,yBAAKS,UAAU,cACZ,2BAAOO,GAAG,gBACR,+BACE,oCACA,0CAEM,+BACER,KAAKV,MAAMG,YAAY,KArB7B,2FAsBMO,KAAKV,MAAMG,aAAa,KA9BvB,WACd,GAAG,EAAKH,MAAMG,aAAa,IAC3B,IAAK,IAAIgB,EAAI,EAAGA,EAAI,EAAKnB,MAAMG,YAAagB,IAC1CV,EAAOW,KAAK,gCAAK,8BAAO,EAAKpB,MAAMC,IAAIoB,QAAS,EAAKrB,MAAMC,IAAIkB,GAAGG,MAAtD,IAAiE,4BAAK,EAAKtB,MAAMC,IAAIoB,QAAS,EAAKrB,MAAMC,IAAIkB,GAAGI,aAE9H,OAAOd,EAyBoCe,KAGlC,oC,GAjEKC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d5144a9.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nimport axios from 'axios';\naxios.defaults.baseURL='http://localhost:4000'\nclass App extends React.Component{\n  state={\n      res:[],\n      number:0,\n      finalnumber:0\n   };\n  \n  async componentDidMount(){\n   \n   fetch(\"http://localhost:4000/test\")\n      .then(response => response.json())\n      .then(res => {\n        this.setState({ res:res });\n  \n  });\n \n\n  \n\n \n  }\n  \nrender() {\n  const numberEvent=(event)=>{\n\n    this.setState({number:event.target.value });\n  }\n  const numberfinalEvent=(event)=>{\n\n    this.setState({finalnumber:this.state.number});\n  }\n  let numret = [];\n  const wordlis = () => {\n    if(this.state.finalnumber<=325)\n    for (let i = 0; i < this.state.finalnumber; i++) {\n      numret.push(<tr> <td>{!!this.state.res.length &&this.state.res[i].word}</td> <td>{this.state.res.length &&this.state.res[i].frequency}</td></tr>);\n    }\n    return numret;\n  };\n  const error1 = () =>{\n    return(<h5>OOPS that number is larger than the number of words we have</h5>);\n  };\n\n \n  const { res } = this.state;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"head\"><h1>WELCOME</h1></div>\n      <h2>Top words in the paragraph with their frequency</h2>\n      <h3>Mention the number of words whose frequency you want to know</h3>\n      <input type=\"number\"  onChange={numberEvent}  /><br></br>\n      \n    <span> <button onClick={numberfinalEvent}  >Submit</button></span> <br></br>\n  <div className=\"container1\">\n     <table id=\"simple-board\">\n       <thead>\n         <th>WORD</th>\n         <th>FREQUENCY</th>\n       </thead>\n               <tbody>\n               {(this.state.finalnumber>325)&&error1()}  \n               {(this.state.finalnumber<=325)&&wordlis()}\n               </tbody>\n             </table>\n             <br></br>\n             </div>   \n      </header>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}